<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>My Blog - Experiments</title><link href="/" rel="alternate"></link><link href="/feeds/experiments.atom.xml" rel="self"></link><id>/</id><updated>2020-07-25T00:00:00+05:30</updated><entry><title>Experimenting with Redis (DynamoDB)</title><link href="/experimenting-with-redis-dynamodb.html" rel="alternate"></link><published>2020-07-25T00:00:00+05:30</published><updated>2020-07-25T00:00:00+05:30</updated><author><name>Saravanan N</name></author><id>tag:None,2020-07-25:/experimenting-with-redis-dynamodb.html</id><summary type="html">&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Recently, I have been exploring NoSQL DBs. During that, I came across &lt;em&gt;DynamoDB&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;DynamoDB is a fully managed distributed key-value and document database. &lt;/p&gt;
&lt;p&gt;From AWS Documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale. It's a fully managed, multiregion, multimaster, durable â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;h3&gt;Introduction&lt;/h3&gt;
&lt;p&gt;Recently, I have been exploring NoSQL DBs. During that, I came across &lt;em&gt;DynamoDB&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;DynamoDB is a fully managed distributed key-value and document database. &lt;/p&gt;
&lt;p&gt;From AWS Documentation:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Amazon DynamoDB is a key-value and document database that delivers single-digit millisecond performance at any scale. It's a fully managed, multiregion, multimaster, durable database with built-in security, backup and restore, and in-memory caching for internet-scale applications. DynamoDB can handle more than 10 trillion requests per day and can support peaks of more than 20 million requests per second.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In DynamoDB&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Data is stored as a collection of documents in tables.&lt;/li&gt;
&lt;li&gt;Documents are stored across the nodes in a cluster. Partition key's value is used to determine the node, in which the document has to be stored.&lt;/li&gt;
&lt;li&gt;Each document can also have a sort key which can be used to store the documents in sorted order based on the value of that key.&lt;/li&gt;
&lt;li&gt;Data cannot be queried without knowing the value of partition key in the document.&lt;/li&gt;
&lt;li&gt;Data can also be queried by using combination of partition key and sort key.&lt;/li&gt;
&lt;li&gt;Combination of partition key and sort key needs to be unique.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let us consider an example of managing movies catalog in DynamoDB to understand the above mentioned facts. The catalog  consists of multiple entries with details about category, title, release year of the movie.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;category&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;scifi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;1999&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Matrix&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Our intention is to store and query them based on category and release year. 
To Achieve that, we might store something similar to the following document in table &lt;code&gt;movies&lt;/code&gt;. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;partition_key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;category:scifi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;sort_key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;year:1996&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Matrix&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get all the movies that belong to a particular category, we have to query the catalog using the partition key .
To get all the movies released in a particular year, in a particular category, we can use the combination of sort key and partition key to query the catalog.&lt;/p&gt;
&lt;p&gt;The above mentioned facts about DynamoDB, made me think about an experiment - &lt;strong&gt;Can I build something that mimics these using Redis&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;About Redis from redis.io&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs, geospatial indexes with radius queries and streams.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Redis supports sharding data based on keys, It supports data types hashes, sortedset. One important feature that made me interested is the ability to read the members in sorted set using the command &lt;em&gt;ZRANGEBYLEX&lt;/em&gt; &lt;/p&gt;
&lt;h3&gt;How to implement this&lt;/h3&gt;
&lt;p&gt;My first thought about how to store the documents was simple. It was create to a value using partition key, sort key and a json dump which had other fields from the document and store it in a sorted set with score as 0, so all I have to do now is to use ZRANGEBYLEX to provide the querying capabilities that I mentioned above.&lt;/p&gt;
&lt;p&gt;For example, In a table &lt;em&gt;movies&lt;/em&gt;, if the document that needed to be stored is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;partition_key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;category:scifi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;sort_key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;year:1999&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Matrix&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I can form &lt;code&gt;category:scifi|year:1999|"{\"title\": \"The Matrix\"}"&lt;/code&gt; and store it in a sortedset &lt;code&gt;movies&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Problem with this approach&lt;/h3&gt;
&lt;p&gt;Storing the data like this can only support range queries. It cannot support get item query using the combination of partition key and sort key, also it cannot support updating / deleting a value by using partition key and sort key.&lt;/p&gt;
&lt;h3&gt;Solving the Get Item and Delete Item&lt;/h3&gt;
&lt;p&gt;I decided to use hash for storing the values, instead of having it as a part of the sort key. 
When we have to store document, &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;partition_key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;category:scifi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;sort_key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;year:1999&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Matrix&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There will two parts that needs to be stored &lt;/p&gt;
&lt;p&gt;&lt;code&gt;category:scifi|year:1999&lt;/code&gt; in &lt;code&gt;movies__sortedset&lt;/code&gt; sortedset
&lt;code&gt;"{\"title\": \"The Matrix\"}"&lt;/code&gt; in a hash with key &lt;code&gt;category:scifi|year:1999&lt;/code&gt; in &lt;code&gt;movies__hashmap&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The sorted set can act as an Index to help with range queries.
The hash table can be used for get, delete queries.&lt;/p&gt;
&lt;h3&gt;Distributing the data according to the partition key&lt;/h3&gt;
&lt;p&gt;Both the value in hashmap and value in the sorted set needs to be present in the same node. For this requirement I decided to use &lt;code&gt;{}&lt;/code&gt;. Using these braces, will make redis to consider the values present within these braces for distributing the data among the nodes. &lt;/p&gt;
&lt;p&gt;From redis documentation  - https://redis.io/topics/cluster-spec&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If the key contains a "{...}" pattern only the substring between { and } is hashed in order to obtain the hash slot.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Keeping with same example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;partition_key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;category:scifi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;sort_key&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;year:1999&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Matrix&amp;quot;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I decided to have a hash table and sortedset per partition key, so the hash map name will be &lt;code&gt;movies__{&amp;lt;partition_key&amp;gt;}__hashmap&lt;/code&gt; and &lt;code&gt;movies__{&amp;lt;partition&amp;gt;}__sortedset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Inside those hash table and sortedset I would have stored those values as I mentioned above.&lt;/p&gt;
&lt;h3&gt;Implementation&lt;/h3&gt;
&lt;p&gt;I implemented this using docker (for creating a redis cluster) and python. Using docker-compose, I created a redis cluster (3 masters and 3 slaves),
then I created another python container, in which I added to the script to implement the read the data and to store the data. I also added support for range queries (query using partition key and sort range).&lt;/p&gt;
&lt;p&gt;Then I used pytest to test positive / success workflows. I don't want to go into details about the test cases that I have written, you can find the code &lt;a href="https://github.com/saravanan-nj/redis_experiement_1"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To test the distribution of partition and sort keys among the nodes, I downloaded IMDB Dataset, in that title dataset had similar structure as mentioned in the above example.  &lt;/p&gt;
&lt;p&gt;Example&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;region&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;US&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The Clown and His Dogs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="s2"&gt;&amp;quot;titleId&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;tt0000002&amp;quot;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;In this I used region for partition key and titleId for sort key&lt;/p&gt;
&lt;p&gt;I loaded the first 100k documents from this dataset using a python script - &lt;a href="https://github.com/saravanan-nj/redis_experiement_1"&gt;movies client&lt;/a&gt; to a table &lt;code&gt;movies&lt;/code&gt;. It took around 12 minutes on my machine.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt load movies data" src="/images/July/load_movies.png"&gt;&lt;/p&gt;
&lt;p&gt;Then, I used the key command's output in redis nodes to list the keys stored in them. I found that both the hash table values and ordered set values of the same partition key to be in the same master node using key command's output.&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt redis keys output" src="/images/July/redis-cli-keys-1.png"&gt;
&lt;img alt="alt redis keys sorted output" src="/images/July/redis-cli-keys-sorted.png"&gt;&lt;/p&gt;
&lt;p&gt;To find out about the performance during querying using partition key and sort key. I wrote a script to query the table using partition key (Region) and sort range (Range of titleId)&lt;/p&gt;
&lt;p&gt;The output of getting movie details in US Region ranging from titleId 1 to 10000 in 10 batches (batch size - 1000) took 0.2 seconds&lt;/p&gt;
&lt;p&gt;&lt;img alt="alt timing" src="/images/July/get_range_movies.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Note: The above is just an indication of the performance of this implementation, it is not for benchmarking against Dynamodb. I never intended this implementation to be benchmarked against DynamoDB&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;In this, I just verified whether it is possible to build something like dynamodb on top of redis (by me). I never intended this to be an alternative to DynamoDB. This is no way near the capabilities of DynamoDB.  Few things that are not sure about this is 
1. What will happen if the memory of a node is full. 
2. Does storing the hash and sortedset has any advantage? &lt;/p&gt;
&lt;p&gt;I just thought it would be an interesting experiment to create such a data store for fun. I have the code &lt;a href="https://github.com/saravanan-nj/redis_experiement_1"&gt;here&lt;/a&gt;. &lt;/p&gt;</content><category term="Experiments"></category></entry></feed>